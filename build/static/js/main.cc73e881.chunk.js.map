{"version":3,"sources":["helpers/storage/LocalStorage.js","helpers/network/HttpClient.js","context/AuthContext.js","components/loader/Loader.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","KEY_TOKEN","LocalStorage","setToken","token","remove","set","maxAge","sameSite","secure","getToken","get","httpClient","axios","create","baseURL","process","interceptors","request","use","config","headers","Authorization","AuthContext","createContext","Loader","_ref","type","_jsxs","className","children","_jsx","src","PropagateLoader","color","loading","size","LoginPage","lazy","HomePage","ActorPage","CategoryPage","CategoryQuestionPage","InternationalizationPage","NotaryPage","NotaryPageCRUD","SubcategoryQuestionPage","UserPage","QuestionPage","PolicyPage","ContactPage","NotarialActPage","NotarialAct","BannerPage","CommentPage","PolicyPageCRUD","InputPage","CallmePage","ChatPage","ChatbotPage","Chatbot","Aditional","Notification","App","user","setUser","useState","PrivateRoute","component","Component","rest","Route","render","props","Redirect","to","useEffect","async","response","HttpClient","status","data","window","location","href","loadUser","Provider","value","updateUser","Suspense","fallback","BrowserRouter","Switch","path","exact","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc73e881.chunk.js","sourcesContent":["import { Cookies } from 'react-cookie'\r\nconst cookies = new Cookies();\r\n\r\nexport const KEY_TOKEN = \"token\";\r\n\r\nconst LocalStorage =  {\r\n    // TOKEN\r\n    setToken(token) {\r\n        cookies.remove(KEY_TOKEN);\r\n        cookies.set(KEY_TOKEN, token, {\r\n            maxAge: 60 * 60 * 5,\r\n            sameSite: \"lax\", \r\n            secure: true\r\n        });\r\n    },\r\n\r\n    getToken() {\r\n        return cookies.get(KEY_TOKEN);\r\n    }\r\n}\r\n\r\nexport default LocalStorage;\r\n","import axios from 'axios'\r\nimport LocalStorage from '../storage/LocalStorage'\r\n\r\nconst httpClient = axios.create({\r\n    baseURL: process.env.REACT_APP_URL_API\r\n})\r\n\r\nhttpClient.interceptors.request.use(function (config) {\r\n    const token = LocalStorage.getToken();\r\n    config.headers.Authorization =  token ? `Bearer ${token}` : '';\r\n    return config;\r\n});\r\n\r\nexport default httpClient;\r\n","import { createContext } from 'react'\r\nconst AuthContext = createContext();\r\nexport default AuthContext;","import React from 'react'\r\nimport PropagateLoader from \"react-spinners/PropagateLoader\"\r\n\r\nconst Loader = ({ type = \"\" }) => {\r\n    return (\r\n        <div className={\"loader-page \" + type}>\r\n            <img src=\"/assets/logo/logo.svg\"/>\r\n            <PropagateLoader \r\n                color={'#723BED'} \r\n                loading={true} \r\n                size={15} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { lazy, Suspense, useState, useEffect } from 'react'\r\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom'\r\n\r\n// STYLE\r\nimport 'antd/dist/antd.css'\r\nimport './styles/theme.scss'\r\n\r\n// COMPONENTS\r\nimport Loader from './components/loader/Loader'\r\n\r\n\r\nimport HttpClient from './helpers/network/HttpClient'\r\n\r\n// CONTEXT \r\nimport AuthContext from './context/AuthContext';\r\n\r\n// COOKIE\r\nimport Cookies from \"universal-cookie\";\r\nconst cookies = new Cookies();\r\n\r\n\r\n// PAGES\r\nconst LoginPage = lazy(() => import('./pages/login/login.page'))\r\nconst HomePage = lazy(() => import('./pages/home/home.page'))\r\nconst ActorPage = lazy(() => import('./pages/actor/actor.page'))\r\nconst CategoryPage = lazy(() => import('./pages/category/category.page'))\r\nconst CategoryQuestionPage = lazy(() => import('./pages/categoryquestion/category.question.page'))\r\nconst InternationalizationPage = lazy(() => import('./pages/internationalization/internationalization.page'))\r\nconst NotaryPage = lazy(() => import('./pages/notary/notary.page'))\r\nconst NotaryPageCRUD = lazy(() => import('./pages/notary/components/Notary.page'))\r\nconst SubcategoryQuestionPage = lazy(() => import('./pages/subcategoryquestion/subcategoryquestion.page'))\r\nconst UserPage = lazy(() => import('./pages/user/user.page'))\r\nconst QuestionPage = lazy(() => import('./pages/question/question.page'))\r\nconst PolicyPage = lazy(() => import('./pages/policies/policy.page'))\r\nconst ContactPage = lazy(() => import('./pages/contact/contact.page'))\r\nconst NotarialActPage = lazy(() => import('./pages/notarialact/notarial.act.page'))\r\nconst NotarialAct = lazy(() => import('./pages/notarialact/components/NotarialAct'))\r\nconst BannerPage = lazy(() => import('./pages/banner/banner.page'))\r\nconst CommentPage = lazy(() => import('./pages/comment/comment.page'))\r\nconst PolicyPageCRUD = lazy(() => import('./pages/policies/components/PolicyPage'))\r\nconst InputPage = lazy(() => import('./pages/input/input.page'))\r\nconst CallmePage = lazy(() => import('./pages/callme/callme.page'))\r\nconst ChatPage = lazy(() => import('./pages/chat/chat.page'))\r\nconst ChatbotPage = lazy(() => import('./pages/chatbot/chatbot.page'))\r\nconst Chatbot= lazy(() => import('./pages/chatbot/components/Chatbot'))\r\nconst Aditional= lazy(() => import('./pages/aditionalconfig/aditional.page'))\r\nconst Notification= lazy(() => import('./pages/notification/notification.page'))\r\n\r\nfunction App() {\r\n\r\n  const [user, setUser] = useState();\r\n\r\n  const loadUser = async () => {\r\n    const response = await HttpClient.get('/api/user/reload');\r\n    if (response.status == 200) {\r\n      setUser(response.data);\r\n    } else {\r\n      if (cookies.get('token')) {\r\n        cookies.remove('token');\r\n        window.location.href = \"/login\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // RUTAS PRIVADAS\r\n  const PrivateRoute = ({ component: Component, ...rest }) => (\r\n    <Route {...rest} render={(props) => (\r\n      cookies.get('token')\r\n        ? <Component {...props} />\r\n        : <Redirect to='/login' />\r\n    )} />\r\n  )\r\n\r\n  useEffect(() => {\r\n    loadUser();\r\n  }, [])\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user: user,\r\n        updateUser: setUser\r\n      }}>\r\n      <Suspense fallback={<Loader />}>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path='/login' component={LoginPage} />\r\n            {/* PANEL DE CONTROL */}\r\n            <PrivateRoute exact path=\"/\" component={HomePage} />\r\n\r\n            {/* TRAMITES */}\r\n            <PrivateRoute exact path=\"/notary\" component={NotaryPage} />\r\n            <PrivateRoute exact path=\"/notarycrud\" component={NotaryPageCRUD} />\r\n            <PrivateRoute exact path=\"/notarial-act/view\" component={NotarialActPage} />\r\n            <PrivateRoute exact path=\"/notarial-act/form\" component={NotarialAct} />\r\n            <PrivateRoute exact path=\"/notarial-act/category\" component={CategoryPage} />\r\n            <PrivateRoute exact path=\"/notarial-act/actor\" component={ActorPage} />\r\n            <PrivateRoute exact path=\"/notarial-act/input\" component={InputPage} />\r\n\r\n            {/* CONFIGURACIÓN */}\r\n            <PrivateRoute exact path=\"/website/banner\" component={BannerPage} />\r\n            <PrivateRoute exact path=\"/website/comment\" component={CommentPage} />\r\n            <PrivateRoute exact path=\"/website/pages\" component={PolicyPageCRUD} />\r\n            <PrivateRoute exact path=\"/website/categoryquestion\" component={CategoryQuestionPage} />\r\n            <PrivateRoute exact path=\"/website/internationalization\" component={InternationalizationPage} />\r\n            <PrivateRoute exact path=\"/website/subcategoryquestion\" component={SubcategoryQuestionPage} />\r\n            <PrivateRoute exact path=\"/website/question\" component={QuestionPage} />\r\n            <PrivateRoute exact path=\"/website/page\" component={PolicyPage} />\r\n            <PrivateRoute exact path=\"/website/contact\" component={ContactPage} />\r\n            <PrivateRoute exact path=\"/user\" component={UserPage} />\r\n            <PrivateRoute exact path=\"/chatbot\" component={ChatbotPage} />\r\n            <PrivateRoute exact path=\"/chatbot/form\" component={Chatbot} />\r\n            <PrivateRoute exact path=\"/aditional-config\" component={Aditional} />\r\n            <PrivateRoute exact path=\"/notification\" component={Notification} />\r\n\r\n            {/* SOPORTE */}\r\n            <PrivateRoute exact path=\"/support/callme\" component={CallmePage} />\r\n            <PrivateRoute exact path=\"/support/chat\" component={ChatPage} />\r\n            \r\n            \r\n          </Switch>\r\n        </BrowserRouter>\r\n      </Suspense>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}